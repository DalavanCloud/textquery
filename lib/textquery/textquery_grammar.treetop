grammar TextQueryGrammar

  rule expression
     logical / value
  end

  rule logical
    op1:value space operator:binary space op2:expression {
      def eval(text, opt)
        operator.eval(op1.eval(text, opt), op2.eval(text, opt))
      end
    }
    /
    op1:value [\s]+ op2:expression {
        def eval(text, opt)
          op1.eval(text, opt) && op2.eval(text, opt)
        end
      }
  end

  rule binary
    'AND' {
      def eval(a,b)
        a && b
      end
    }
    /
    'OR' {
      def eval(a,b)
        a || b
      end
    }
  end

  rule unary
    ('-' / 'NOT') {
      def eval(a)
        not a
      end
    }
  end

  rule space
    [\s]*
  end

  rule word
    [^\s\(\)]+ <WordMatch>
  end

  rule words
    [^'"]+ <WordMatch>
  end

  rule quote
    ['"]
  end

  rule value
    '(' space expression space ')' {
       def eval(text, opt)
         expression.eval(text, opt)
       end
    }
    /
    operator:unary space value {
      def eval(text, opt)
        operator.eval(value.eval(text, opt))
      end
    }
    /
    quote space words space quote {
      def eval(text, opt)
        words.eval(text, opt)
      end
    }
    /
    word
  end
end
